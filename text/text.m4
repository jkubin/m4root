# vim:ts=16:sw=16

__HEADER(‚ü¶Josef Kubin‚üß, ‚ü¶2020/05/11‚üß, ‚ü¶m4root‚üß)
___DESCR(‚ü¶generates a plain text file from (multiple) source files‚üß)
__REASON(‚ü¶the total number of words and characters that would be printed‚üß)

ifdef(‚ü¶PRINT_HEADER‚üß, ‚ü¶

	divert(0)dnl
vim:ts=4:sw=4

DONTE()

divert(-1)
‚üß)

# Œ≤
pushdef(‚ü¶PRINT_EMPTY_LINE‚üß, ‚ü¶

	divert(CURRQU)
divert(-1)
‚üß)

# Œ≤
pushdef(‚ü¶PRINT_MONO‚üß, ‚ü¶

	divert(CURRQU)dnl
EXPAND_ARG1_WITHOUT_TRAILING_LF(‚üßdefn(‚ü¶EXPAND_LAST‚üß)‚ü¶)

divert(-1)
‚üß)

# Œ≤
pushdef(‚ü¶PRINT_MONO_NO_EMPTY_LINE‚üß, ‚ü¶

	divert(CURRQU)dnl
EXPAND_ARG1_WITHOUT_TRAILING_LF(‚üßdefn(‚ü¶EXPAND_LAST‚üß)‚ü¶)
divert(-1)
‚üß)

# Œ≤
pushdef(‚ü¶PRINT_LANG‚üß, ‚ü¶

	divert(CURRQU)dnl
EXPAND_LANG_WITHOUT_TRAILING_LF(‚üßdefn(‚ü¶EXPAND_LAST‚üß)‚ü¶)

divert(-1)
‚üß)

# Œ≤
pushdef(‚ü¶PRINT_LANG_NO_EMPTY_LINE‚üß, ‚ü¶

	divert(CURRQU)dnl
EXPAND_LANG_WITHOUT_TRAILING_LF(‚üßdefn(‚ü¶EXPAND_LAST‚üß)‚ü¶)
divert(-1)
‚üß)

# Œ≤
pushdef(‚ü¶PRINT_IMAGE‚üß, ‚ü¶

	divert(CURRQU)dnl
WORD_IMAGE IMAGE_COUNTER: EXPAND_LANG_WITHOUT_TRAILING_LF(‚üßdefn(‚ü¶EXPAND_LAST‚üß)‚ü¶)

divert(-1)
‚üß)

# Œ≤
pushdef(‚ü¶PRINT_PROGRAMLISTING‚üß, ‚ü¶

	divert(CURRQU)dnl
EXPAND_ARG1_WITHOUT_TRAILING_LF(‚üßdefn(‚ü¶SELECT_LAST‚üß)‚ü¶)

divert(-1)
‚üß)

# Œ≤
pushdef(‚ü¶PRINT_PROMPT_USR‚üß, ‚ü¶

	divert(CURRQU)dnl
PROMPT() dnl
divert(-1)
‚üß)

# Œ≤
pushdef(‚ü¶PRINT_PROMPT_ROOT‚üß, ‚ü¶

	divert(CURRQU)dnl
PROMPT_ROOT() dnl
divert(-1)
‚üß)

# Œ≤
pushdef(‚ü¶PRINT_BULLET‚üß, ‚ü¶

	divert(CURRQU)dnl
‚Ä¢ dnl
divert(-1)
‚üß)

# Œ≤
pushdef(‚ü¶PRINT_NOTE_SYMBOL‚üß, ‚ü¶

	divert(CURRQU)dnl
üñπ dnl
divert(-1)
‚üß)

# Œ≤
pushdef(‚ü¶PRINT_INFO_SYMBOL‚üß, ‚ü¶

	divert(CURRQU)dnl
üõà dnl
divert(-1)
‚üß)

# Œ≤
pushdef(‚ü¶PRINT_WARN_SYMBOL‚üß, ‚ü¶

	divert(CURRQU)dnl
‚ö† dnl
divert(-1)
‚üß)

# Œ≤
pushdef(‚ü¶PRINT_EXCL_SYMBOL‚üß, ‚ü¶

	divert(CURRQU)dnl
‚ùï dnl
divert(-1)
‚üß)

# Œ≤
pushdef(‚ü¶PART_INIT‚üß, defn(‚ü¶PART_INIT‚üß)‚ü¶

	ifdef(‚ü¶PRINT_HEADER‚üß, ‚ü¶

		divert(0)dnl
__SOURCE(PAYR(__file__), SARG1(esyscmd(‚ü¶date '+‚ü¶‚ü¶%Y%m%d-%R:%S‚üß‚üß,'‚üß)), SARG1(esyscmd(‚ü¶git log -1 --format='‚ü¶‚ü¶%h‚üß‚üß,' ‚üß__file__)), SARG1(esyscmd(‚ü¶git log -1 --format='‚ü¶‚ü¶%h‚üß‚üß,'‚üß)))

WORD_PART PART_COUNTER. dnl
divert(-1)
	‚üß)

‚üßdefn(‚ü¶PRINT_LANG‚üß))

#      ______      ___________
# --->/ PART \--->/ PART_NEXT \---.
#     \______/    \___________/<--'
#
# A ‚Üí Œ≤
define(‚ü¶PART‚üß, ‚ü¶

	# define counter for parts
	define(‚ü¶PART_COUNTER‚üß,	defn(‚ü¶COUNT_UP‚üß))
	PART_COUNTER(1)

	# transition to next node
	define(‚ü¶$0‚üß, defn(‚ü¶PART_NEXT‚üß))

‚üßdefn(‚ü¶PART_INIT‚üß))

# A ‚Üí Œ≤
pushdef(‚ü¶PART_FINISH‚üß, ‚ü¶

	# if the REF was used it changes automaton state to the REF_NEXT node
	ifelse(defn(‚ü¶REF‚üß), defn(‚ü¶REF_NEXT‚üß), ‚ü¶

		# increment chapter index
		CHAPTER_COUNTER

		# add item to navigation and below the page
		divert(CHAPTER_NAVIG_DATA)dnl
CHAPTER_COUNTER_val WORD_REFERENCES
divert(ARTICLE_REFER_CAPT)dnl
CHAPTER_COUNTER_val WORD_REFERENCES
divert(-1)
	‚üß)

	# if enabled, adds a code to references
	ifdef(‚ü¶ADD_LINKS_TO_ALL_PARTS_OF_THE_SERIES‚üß, ‚ü¶

		define(‚ü¶ALL_PARTS_COUNTER‚üß, defn(‚ü¶COUNT_UP‚üß))
		ALL_PARTS_COUNTER(1)

		MAKE_ALL_PARTS(FILE_LIST)

		# increment chapter index
		CHAPTER_COUNTER

		# add item to navigation and below the page
		divert(CHAPTER_NAVIG_DATA)dnl
CHAPTER_COUNTER_val SENTENCE_ALL_PARTS
divert(ALL_PARTS_LIST)dnl
CHAPTER_COUNTER_val SENTENCE_ALL_PARTS
divert(ALL_PARTS_END)
divert(-1)
	‚üß)
‚üß)

# A ‚Üí Œ≤
define(‚ü¶PART_NEXT‚üß, defn(‚ü¶PART_FINISH‚üß)‚ü¶

	divert(0)dnl print all cached previous parts to stdout, start the next part
undivert‚ü¶‚üßifdef(‚ü¶PRINT_HEADER‚üß,
‚ü¶------------------------ >8 ------------------------
‚üß)dnl
divert(-1)

‚üßdefn(‚ü¶PART_INIT‚üß))

# completes the last part when exiting the script
m4wrap(defn(‚ü¶PART_FINISH‚üß))

# A ‚Üí Œ≤
define(‚ü¶MAKE_ALL_PARTS‚üß, ‚ü¶

	ifelse(‚ü¶$1‚üß, ‚ü¶‚üß, ‚ü¶‚üß, ‚ü¶

		# set caption from associative memory
		divert(ALL_PARTS_ITEMS)dnl
	ALL_PARTS_COUNTER. defn(‚ü¶$1‚üß.LANG_CODE.capt)‚ü¶‚üßifdef(OTHER_LANG_CODE‚ü¶_OTHER_LANG‚üß, ‚ü¶, OTHER_LANG_CODE‚üß)
divert(-1)

		# right recursive loop
		$0(shift($@))
	‚üß)
‚üß)

# Œ≤
define(‚ü¶CHAPTER_NEXT‚üß, ‚ü¶

	# increment index
	CHAPTER_COUNTER
	define(‚ü¶SECT1_COUNTER_val‚üß, 0)
	define(‚ü¶SECT2_COUNTER_val‚üß, 0)

	define(‚ü¶SELITM‚üß, SELECT_LANG(‚üßdefn(‚ü¶EXPAND_LAST‚üß)‚ü¶))

	divert(CHAPTER_NAVIG_DATA)dnl
CHAPTER_COUNTER_val SELITM
divert(CURRQU)dnl
CHAPTER_COUNTER_val SELITM
divert(-1)
‚üß)

#      _______________      ______________
# --->/ CHAPTER_FIRST \--->/ CHAPTER_NEXT \---.
#     \_______________/    \______________/<--'
# Œ≤
define(‚ü¶CHAPTER_FIRST‚üß, ‚ü¶

	divert(START_OF_NAVIGATION)dnl generates table of content
defn(‚ü¶WORD_CONTENT‚üß)dnl
ifelse(defn(OTHER_LANG_CODE‚ü¶‚üß_OTHER_LANG), ‚ü¶‚üß, ‚ü¶‚üß, ‚ü¶ (ARG1(OTHER_LANG_CODE)_OTHER_LANG)‚üß)dnl
			mc txt pub spell dnl
ifdef(‚ü¶NEW_ARTICLE‚üß, ‚ü¶‚üß, ‚ü¶WORD_UPDATED SARG1(esyscmd(defn(‚ü¶DATE_COMMAND‚üß)))‚üß)
divert(END_OF_NAVIGATION)
divert(-1)

	# set article queue
	define(‚ü¶CURRQU‚üß, ARTICLE_CONTENT)

	# transition to next node
	define(‚ü¶$0‚üß, defn(‚ü¶CHAPTER_NEXT‚üß))

‚üßdefn(‚ü¶CHAPTER_NEXT‚üß))

# A ‚Üí Œ≤
define(‚ü¶SECT1_ARTICLE‚üß, ‚ü¶

	# increment index
	SECT1_COUNTER
	define(‚ü¶SECT2_COUNTER_val‚üß, 0)

	define(‚ü¶SELITM‚üß, SELECT_LANG(‚üßdefn(‚ü¶EXPAND_LAST‚üß)‚ü¶))

	divert(CHAPTER_NAVIG_DATA)dnl
	CHAPTER_COUNTER_val.SECT1_COUNTER_val SELITM
divert(CURRQU)dnl
CHAPTER_COUNTER_val.SECT1_COUNTER_val SELITM
divert(-1)
‚üß)

# A ‚Üí Œ≤
define(‚ü¶SECT2_ARTICLE‚üß, ‚ü¶

	# increment index
	SECT2_COUNTER

	define(‚ü¶SELITM‚üß, SELECT_LANG(‚üßdefn(‚ü¶EXPAND_LAST‚üß)‚ü¶))

	divert(CHAPTER_NAVIG_DATA)dnl
		CHAPTER_COUNTER_val.SECT1_COUNTER_val.SECT2_COUNTER_val SELITM
divert(CURRQU)dnl
CHAPTER_COUNTER_val.SECT1_COUNTER_val.SECT2_COUNTER_val SELITM
divert(-1)
‚üß)

# Œ≤
define(‚ü¶APPENDIX_NEXT‚üß, ‚ü¶

	# increment index
	define(‚ü¶APPENDIX_LETTER‚üß, format(‚ü¶%c‚üß, APPENDIX_COUNTER))
	define(‚ü¶SECT1_COUNTER_val‚üß, 0)
	define(‚ü¶SECT2_COUNTER_val‚üß, 0)

	define(‚ü¶SELITM‚üß, SELECT_LANG(‚üßdefn(‚ü¶EXPAND_LAST‚üß)‚ü¶))

	divert(APPENDIX_NAVIG_DATA)dnl
APPENDIX_LETTER SELITM
divert(APPENDIX_NAVIGATION)dnl
undivert(CURRQU)dnl
APPENDIX_LETTER SELITM
divert(CURRQU)
divert(-1)

	# temporarily change the current queue
	pushdef(‚ü¶CURRQU‚üß, APPENDIX_NAVIGATION)
	APPENDIX_APPEND_CODE()
	# set the previous queue
	popdef(‚ü¶CURRQU‚üß)
‚üß)

#      ________________      _______________
# --->/ APPENDIX_FIRST \--->/ APPENDIX_NEXT \---.
#     \________________/    \_______________/<--'
#      _______      ________________
# --->/ SECT1 \--->/ SECT1_APPENDIX \---.
#     \_SECT2_/    \_SECT2_APPENDIX_/<--'
#
# Œ≤
define(‚ü¶APPENDIX_FIRST‚üß, ‚ü¶

	# starting letter is ord('A') == 65
	define(‚ü¶APPENDIX_COUNTER‚üß, defn(‚ü¶COUNT_UP‚üß))
	APPENDIX_COUNTER(65)

	# set the queue
	define(‚ü¶CURRQU‚üß, APPENDIX_CONTENT)

	# a separator for TOC
	divert(APPENDIX_NAVIG_DATA)dnl
---
divert(-1)

	# transition to the next nodes
	define(‚ü¶APPENDIX‚üß, defn(‚ü¶APPENDIX_NEXT‚üß))
	define(‚ü¶SECT1‚üß, defn(‚ü¶SECT1_APPENDIX‚üß))
	define(‚ü¶SECT2‚üß, defn(‚ü¶SECT2_APPENDIX‚üß))

‚üßdefn(‚ü¶APPENDIX_NEXT‚üß))

# Œ≤
define(‚ü¶SECT1_APPENDIX‚üß, ‚ü¶

	# increment index
	SECT1_COUNTER
	define(‚ü¶SECT2_COUNTER_val‚üß, 0)

	define(‚ü¶SELITM‚üß, SELECT_LANG(‚üßdefn(‚ü¶EXPAND_LAST‚üß)‚ü¶))

	divert(APPENDIX_NAVIGATION)dnl
	APPENDIX_LETTER.SECT1_COUNTER_val SELITM
divert(CURRQU)dnl
APPENDIX_LETTER.SECT1_COUNTER_val SELITM
divert(-1)
‚üß)

# Œ≤
define(‚ü¶SECT2_APPENDIX‚üß, ‚ü¶

	# increment index
	SECT2_COUNTER

	define(‚ü¶SELITM‚üß, SELECT_LANG(‚üßdefn(‚ü¶EXPAND_LAST‚üß)‚ü¶))

	divert(APPENDIX_NAVIGATION)dnl
		APPENDIX_LETTER.SECT1_COUNTER_val.SECT2_COUNTER_val SELITM
divert(CURRQU)dnl
APPENDIX_LETTER.SECT1_COUNTER_val.SECT2_COUNTER_val SELITM
divert(-1)
‚üß)

# inline elements

# A ‚Üí Œ≤
define(‚ü¶BR‚üß, ‚ü¶
‚üß)

# correct quotes are automatically set according to the language code
# A ‚Üí Œ≤
ifelse(defn(‚ü¶LANG_CODE‚üß), ‚ü¶cs‚üß, ‚ü¶
	define(‚ü¶QUOTE‚üß,	‚ü¶ifelse(‚ü¶$#‚üß, ‚ü¶0‚üß, ‚ü¶‚ü¶$0‚üß‚üß, ‚ü¶‚Äû$1‚Äú‚üß)‚üß)
‚üß, ‚ü¶
	define(‚ü¶QUOTE‚üß,	‚ü¶ifelse(‚ü¶$#‚üß, ‚ü¶0‚üß, ‚ü¶‚ü¶$0‚üß‚üß, ‚ü¶‚Äú$1‚Äù‚üß)‚üß)
‚üß)

# A ‚Üí Œ≤
# Œ≤
define(‚ü¶BOLD‚üß,		‚ü¶ifelse(‚ü¶$#‚üß, ‚ü¶0‚üß, ‚ü¶‚ü¶$0‚üß‚üß, ‚ü¶$1‚üß)‚üß)

# A ‚Üí Œ≤
# A ‚Üí Œµ
# Œ≤
#define(‚ü¶XSPAN‚üß,		defn(‚ü¶BOLD‚üß))
define(‚ü¶ABBREV‚üß,	defn(‚ü¶BOLD‚üß))
define(‚ü¶ACRONYM‚üß,	defn(‚ü¶BOLD‚üß))
define(‚ü¶AMP‚üß,		‚ü¶ifelse(‚ü¶$#‚üß, ‚ü¶0‚üß, ‚ü¶‚ü¶$0‚üß‚üß, ‚ü¶&‚üß)‚üß)
define(‚ü¶AP‚üß,		‚ü¶ifelse(‚ü¶$#‚üß, ‚ü¶0‚üß, ‚ü¶‚ü¶$0‚üß‚üß, ‚ü¶'‚üß)‚üß)
define(‚ü¶BUTTON‚üß,	defn(‚ü¶BOLD‚üß))
define(‚ü¶CITATION‚üß,	defn(‚ü¶BOLD‚üß))
define(‚ü¶CODE‚üß,		‚ü¶ifelse(‚ü¶$#‚üß, ‚ü¶0‚üß, ‚ü¶‚ü¶$0‚üß‚üß, ‚ü¶‚ü¶$1‚üß‚üß)‚üß)
define(‚ü¶DEFINITION‚üß,	defn(‚ü¶BOLD‚üß))
define(‚ü¶DELETED‚üß,	defn(‚ü¶BOLD‚üß))
define(‚ü¶DQ‚üß,		‚ü¶ifelse(‚ü¶$#‚üß, ‚ü¶0‚üß, ‚ü¶‚ü¶$0‚üß‚üß, ‚ü¶"‚üß)‚üß)
define(‚ü¶EMPHASIS‚üß,	defn(‚ü¶BOLD‚üß))
define(‚ü¶EXPLAIN‚üß,	defn(‚ü¶BOLD‚üß))
define(‚ü¶EXPLAIN_CODE‚üß,	defn(‚ü¶CODE‚üß))
define(‚ü¶EXPLAIN_XCODE‚üß,	defn(‚ü¶BOLD‚üß))
define(‚ü¶GT‚üß,		‚ü¶ifelse(‚ü¶$#‚üß, ‚ü¶0‚üß, ‚ü¶‚ü¶$0‚üß‚üß, ‚ü¶>‚üß)‚üß)
define(‚ü¶HCODE‚üß,		defn(‚ü¶CODE‚üß))
define(‚ü¶HEXPLAIN‚üß,	defn(‚ü¶BOLD‚üß))
define(‚ü¶HXCODE‚üß,	defn(‚ü¶BOLD‚üß))
define(‚ü¶INSERTED‚üß,	defn(‚ü¶BOLD‚üß))
define(‚ü¶ITALIC‚üß,	defn(‚ü¶BOLD‚üß))
define(‚ü¶LABEL‚üß,		defn(‚ü¶BOLD‚üß))
define(‚ü¶LI‚üß,		‚ü¶ifelse(‚ü¶$#‚üß, ‚ü¶0‚üß, ‚ü¶‚ü¶$0‚üß‚üß, ‚ü¶‚Ä¢ $1‚üß)‚üß)
define(‚ü¶LT‚üß,		‚ü¶ifelse(‚ü¶$#‚üß, ‚ü¶0‚üß, ‚ü¶‚ü¶$0‚üß‚üß, ‚ü¶<‚üß)‚üß)
define(‚ü¶MARK‚üß,		defn(‚ü¶BOLD‚üß))
define(‚ü¶METER‚üß,		defn(‚ü¶BOLD‚üß))
define(‚ü¶MM‚üß,		defn(‚ü¶BOLD‚üß))
define(‚ü¶NB‚üß,		‚ü¶ifelse(‚ü¶$#‚üß, ‚ü¶0‚üß, ‚ü¶‚ü¶$0‚üß‚üß, ‚ü¶ ‚üß)‚üß)
define(‚ü¶OL‚üß,		defn(‚ü¶LI‚üß))
define(‚ü¶PROGRESS‚üß,	defn(‚ü¶BOLD‚üß))
define(‚ü¶SAMP‚üß,		defn(‚ü¶BOLD‚üß))
define(‚ü¶SMALL‚üß,		defn(‚ü¶BOLD‚üß))
define(‚ü¶SPAN‚üß,		defn(‚ü¶BOLD‚üß))
define(‚ü¶STRIKETHROUGH‚üß,	defn(‚ü¶BOLD‚üß))
define(‚ü¶STRONG‚üß,	defn(‚ü¶BOLD‚üß))
define(‚ü¶SUBSCRIPT‚üß,	defn(‚ü¶BOLD‚üß))
define(‚ü¶SUPERSCRIPT‚üß,	defn(‚ü¶BOLD‚üß))
define(‚ü¶TIME‚üß,		defn(‚ü¶BOLD‚üß))
define(‚ü¶ULINK‚üß,		defn(‚ü¶BOLD‚üß))
define(‚ü¶UL‚üß,		‚ü¶ifelse(‚ü¶$#‚üß, ‚ü¶0‚üß, ‚ü¶‚ü¶$0‚üß‚üß, ‚ü¶	$1‚üß)‚üß)
define(‚ü¶UNDERLINE‚üß,	defn(‚ü¶BOLD‚üß))
define(‚ü¶VARIABLE‚üß,	defn(‚ü¶BOLD‚üß))
define(‚ü¶WBR‚üß)
define(‚ü¶XCODE‚üß,		defn(‚ü¶BOLD‚üß))

# inline elements for convenience

# A ‚Üí Œ≤
#define(‚ü¶BUN‚üß,		defn(‚ü¶BOLD‚üß))
#define(‚ü¶CODE_BLUE‚üß,	defn(‚ü¶BOLD‚üß))
#define(‚ü¶CODE_M4U‚üß,	defn(‚ü¶CODE‚üß))
#define(‚ü¶CODE_UND‚üß,	defn(‚ü¶BOLD‚üß))
define(‚ü¶GRAY‚üß,		defn(‚ü¶BOLD‚üß))
define(‚ü¶PERSON‚üß,	defn(‚ü¶BOLD‚üß))

# block-level elements

# A ‚Üí Œ≤
define(‚ü¶ADDRESS_WRAP‚üß,		defn(‚ü¶EXPAND_LAST‚üß))
define(‚ü¶ARTICLE_WRAP‚üß,		defn(‚ü¶EXPAND_LAST‚üß))
define(‚ü¶ASIDE_WRAP‚üß,		defn(‚ü¶EXPAND_LAST‚üß))
define(‚ü¶BLOCKQUOTE‚üß,		defn(‚ü¶PRINT_LANG‚üß))
define(‚ü¶BLOCKQUOTE_MONO‚üß,		defn(‚ü¶PRINT_MONO‚üß))
define(‚ü¶BRIDGEHEAD‚üß,		defn(‚ü¶PRINT_LANG_NO_EMPTY_LINE‚üß))
define(‚ü¶BRIDGEHEAD_MONO‚üß,		defn(‚ü¶PRINT_MONO_NO_EMPTY_LINE‚üß))
define(‚ü¶CMDSYNOPSIS‚üß, 		defn(‚ü¶PRINT_PROMPT_USR‚üß, ‚ü¶PRINT_PROGRAMLISTING‚üß))
define(‚ü¶CMDSYNOPSIS_ROOT‚üß, 		defn(‚ü¶PRINT_PROMPT_ROOT‚üß, ‚ü¶PRINT_PROGRAMLISTING‚üß))
define(‚ü¶COMMENT_MONO‚üß,		defn(‚ü¶PRINT_MONO‚üß))
define(‚ü¶DESCRIPTION_LIST_DESC‚üß,		defn(‚ü¶PRINT_LANG‚üß))
define(‚ü¶DESCRIPTION_LIST_DESC_MONO‚üß,	defn(‚ü¶PRINT_MONO‚üß))
define(‚ü¶DESCRIPTION_LIST_TERM‚üß,		defn(‚ü¶PRINT_LANG‚üß))
define(‚ü¶DESCRIPTION_LIST_TERM_MONO‚üß,	defn(‚ü¶PRINT_MONO‚üß))
define(‚ü¶DESCRIPTION_LIST_WRAP‚üß,		defn(‚ü¶EXPAND_LAST‚üß))
define(‚ü¶DETAILS_WRAP‚üß,		defn(‚ü¶EXPAND_LAST‚üß))
define(‚ü¶DIV‚üß,			defn(‚ü¶PRINT_LANG‚üß))
define(‚ü¶DIV_MONO‚üß,		defn(‚ü¶PRINT_MONO‚üß))
define(‚ü¶DIV_WRAP‚üß,		defn(‚ü¶EXPAND_LAST‚üß))
define(‚ü¶ENTRY‚üß,			defn(‚ü¶PRINT_LANG‚üß))
define(‚ü¶ENTRY_HEAD‚üß,		defn(‚ü¶PRINT_LANG‚üß))
define(‚ü¶ENTRY_HEAD_MONO‚üß,		defn(‚ü¶PRINT_MONO‚üß))
define(‚ü¶ENTRY_MONO‚üß,		defn(‚ü¶PRINT_MONO‚üß))
define(‚ü¶EXCL‚üß,			defn(‚ü¶PRINT_EXCL_SYMBOL‚üß, ‚ü¶PRINT_LANG‚üß))
define(‚ü¶FIGCAPTION‚üß,		defn(‚ü¶PRINT_LANG‚üß))
define(‚ü¶FIGCAPTION_MONO‚üß,		defn(‚ü¶PRINT_MONO‚üß))
define(‚ü¶FIGURE_WRAP‚üß,		defn(‚ü¶EXPAND_LAST‚üß))
define(‚ü¶FOOTER_WRAP‚üß,		defn(‚ü¶EXPAND_LAST‚üß))
define(‚ü¶FORM_WRAP‚üß,		defn(‚ü¶EXPAND_LAST‚üß))
define(‚ü¶HEADER_WRAP‚üß,		defn(‚ü¶EXPAND_LAST‚üß))
define(‚ü¶IMAGEDATA‚üß,		defn(‚ü¶PRINT_IMAGE‚üß))
define(‚ü¶INFO‚üß,			defn(‚ü¶PRINT_INFO_SYMBOL‚üß, ‚ü¶PRINT_LANG‚üß))
define(‚ü¶ITEMIZEDLIST_WRAP‚üß,		defn(‚ü¶EXPAND_LAST‚üß, ‚ü¶PRINT_EMPTY_LINE‚üß))
define(‚ü¶LISTITEM‚üß,		defn(‚ü¶PRINT_BULLET‚üß, ‚ü¶PRINT_LANG_NO_EMPTY_LINE‚üß))
define(‚ü¶LISTITEM_MONO‚üß,		defn(‚ü¶PRINT_BULLET‚üß, ‚ü¶PRINT_MONO_NO_EMPTY_LINE‚üß))
define(‚ü¶MAIN_WRAP‚üß,		defn(‚ü¶EXPAND_LAST‚üß))
define(‚ü¶NAV‚üß,			defn(‚ü¶PRINT_LANG‚üß))
define(‚ü¶NAV_MONO‚üß,		defn(‚ü¶PRINT_MONO‚üß))
define(‚ü¶NOTE‚üß,			defn(‚ü¶PRINT_NOTE_SYMBOL‚üß, ‚ü¶PRINT_LANG‚üß))
define(‚ü¶NOTE_MONO‚üß,		defn(‚ü¶PRINT_MONO‚üß))
define(‚ü¶NOTE_WRAP‚üß,		defn(‚ü¶EXPAND_LAST‚üß))
define(‚ü¶ORDEREDLIST_WRAP‚üß,		defn(‚ü¶EXPAND_LAST‚üß))
define(‚ü¶PARA‚üß,			defn(‚ü¶PRINT_LANG‚üß))
define(‚ü¶PARA_MONO‚üß,		defn(‚ü¶PRINT_MONO‚üß))
define(‚ü¶PARTINTRO‚üß,		defn(‚ü¶PRINT_LANG‚üß))
define(‚ü¶PLAIN_TEXT‚üß,		defn(‚ü¶PRINT_LANG‚üß))
define(‚ü¶PLAIN_TEXT_MONO‚üß,		defn(‚ü¶PRINT_MONO‚üß))
define(‚ü¶PROGRAMLISTING‚üß, 		defn(‚ü¶PRINT_PROGRAMLISTING‚üß))
define(‚ü¶ROW_WRAP‚üß,		defn(‚ü¶EXPAND_LAST‚üß))
define(‚ü¶SECTION_WRAP‚üß,		defn(‚ü¶EXPAND_LAST‚üß))
define(‚ü¶SUMMARY‚üß,		defn(‚ü¶PRINT_LANG‚üß))
define(‚ü¶SUMMARY_MONO‚üß,		defn(‚ü¶PRINT_MONO‚üß))
define(‚ü¶TABLE_COLGROUP_WRAP‚üß,		defn(‚ü¶EXPAND_LAST‚üß))
define(‚ü¶TABLE_WRAP‚üß,		defn(‚ü¶EXPAND_LAST‚üß))
define(‚ü¶TBODY_WRAP‚üß,		defn(‚ü¶EXPAND_LAST‚üß))
define(‚ü¶TFOOT_WRAP‚üß,		defn(‚ü¶EXPAND_LAST‚üß))
define(‚ü¶THEAD_WRAP‚üß,		defn(‚ü¶EXPAND_LAST‚üß))
define(‚ü¶TILE_BOX‚üß,		defn(‚ü¶PRINT_LANG‚üß))
define(‚ü¶TTITLE‚üß,		defn(‚ü¶PRINT_LANG‚üß))
define(‚ü¶TTITLE_MONO‚üß,		defn(‚ü¶PRINT_MONO‚üß))
define(‚ü¶WARN‚üß,			defn(‚ü¶PRINT_WARN_SYMBOL‚üß, ‚ü¶PRINT_LANG‚üß))

popdef(

	‚ü¶PART_FINISH‚üß,
	‚ü¶PART_INIT‚üß,
	‚ü¶PRINT_BULLET‚üß,
	‚ü¶PRINT_EMPTY_LINE‚üß,
	‚ü¶PRINT_EXCL_SYMBOL‚üß,
	‚ü¶PRINT_IMAGE‚üß,
	‚ü¶PRINT_INFO_SYMBOL‚üß,
	‚ü¶PRINT_LANG‚üß,
	‚ü¶PRINT_LANG_NO_EMPTY_LINE‚üß,
	‚ü¶PRINT_MONO‚üß,
	‚ü¶PRINT_MONO_NO_EMPTY_LINE‚üß,
	‚ü¶PRINT_NOTE_SYMBOL‚üß,
	‚ü¶PRINT_PROGRAMLISTING‚üß,
	‚ü¶PRINT_PROMPT_ROOT‚üß,
	‚ü¶PRINT_PROMPT_USR‚üß,
	‚ü¶PRINT_WARN_SYMBOL‚üß,

)
