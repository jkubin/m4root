# vim:wrap:spell:spelllang=cs,en
#
# DO NOT EDIT! This file is generated automatically!
#
# __SOURCE([intro.mc, 0xbd113cd, 20200208-13:02:58])

7
Generování kódu v M4: úvod

# number of characters (200 ±10 is recommended): 226
16
Makro procesor M4 se používá ke generování libovolně složitého kódu z jednoduchého zdrojového kódu.
Úvodní díl seriálu obsahuje jeho historii, základní principy jazyka, příklady použití a nutné předpoklady pro jeho zvládnutí.

24
Úvod

30
Čtenáři tohoto seriálu se naučí psát skripty pro strojové generování kódu.
Strojově generovaný kód může být libovolně složitý a může obsahovat další vnitřní závislosti.
Vzájemně závislé soubory se složitým kódem jsou pro člověka jen těžce udržitelné v konzistentním stavu.
Je už nutné použít nějaký mechanismus pro generování kódu.
Generování kódu provádí nástroj určený pro transformaci textu – makro procesor.

45
Seriál je zaměřen na praktické použití univerzálního makro procesoru M4 (dále jen M4) pomocí malých příkladů.
Popisuje také teoretický základ všech implementací.
Cílem seriálu je seznámit čtenáře s tímto nástrojem (m4 – je program příkazové řádky) a také programovacím jazykem (M4 – je programovací jazyk).

Na co se používá, jak se v něm programuje a jaké jsou jeho výhody a nevýhody.

59
[výsledkem seriálu je sada ukázkových skriptů pro generování kódu]

59
Vícejazyčný seriál „Generování kódu v M4“ je generován M4 skripty,
které (možná) usnadní psaní článků a seriálů pro www.root.cz (Root.cz – informace nejen ze světa Linuxu) také jiným autorům.

61
Úvodní díl popisuje základní principy jazyka na jednoduchých příkladech.
Všechny příklady používají přepisovací pravidla bezkontextové gramatiky.
Později se naučíme používat výstupní fronty,
automaty, asociativní paměti, zásobníky a zásobníkové automaty.
Naučíme se také psát testovací automaty pro testování vstupních dat.

77
Příklady pro čtenáře

83
Příklady pro čtenáře tvoří komplementární část seriálu a budou do jisté míry vytvářeny na základě podnětů v diskuzi pod článkem.
Na začátku každého dílu je popsána nějaká část jazyka M4 doplněná sadou příkladů na konci.
Každý díl je možné číst v libovolném pořadí.

94
Příklady generování kódu

94
Příklady preprocesoru

94
M4 – příklady

94
Proč používat M4 a proč ne?

94
http://github.com/jkubin/m4root (Generování kódu v M4) – složitější projekt generující HTML5 tohoto seriálu

113
Historie makro jazyků

119
Makro jazyky byly vynalezeny v době, kdy dominoval jazyk symbolických adres – JSA (Jazyk Symbolických Adres – assembler).
Zdrojový kód JSA velmi často obsahuje shodné sekvence instrukcí odlišující se pouze hodnotami operandů.
Shodné sekvence instrukcí je možné seskupit do jednoho slova, nebo-li makro instrukce.
Jméno obvykle popisuje účel skryté sekvence instrukcí.
Makro instrukce se přeloží makro procesorem na původní sekvenci instrukcí, která se posléze přeloží do spustitelného strojového kódu.
Programování v JSA pomocí makro instrukcí je jednodušší, rychlejší a méně náchylné k lidským chybám.

136
Později byly makro jazyky použity k rozšíření kompilovaných programovacích jazyků, protože umožnily psát zdrojový kód na vyšší úrovni abstrakce než jakou poskytuje samotný programovací jazyk.
Rychlost, výkonnost a efektivita složitého programovacího jazyka nižší úrovně je zachována díky makro jazykům.
Avšak je důležité dobře rozumět všem vrstvám kódu.

147
GPM (General Purpose Macro-generator)

151
Základní myšlenku přepisování textových řetězců s argumenty, které se přepíší do dalších rekurzivně přepisovatelných řetězců, představil
Christopher Strachey (Wikipedie) ve svém
GPM (General Purpose Macro-generator) v roce 1965.
Další generace makro procesorů M3 a M4 původní GPM (General Purpose Macro-generator) v podstatě už jen rozšiřovaly.
Základní myšlenka původního návrhu ale zůstala stejná.

165
M3

169
Dennis Ritchie (Wikipedie) převzal základní myšlenku GPM (General Purpose Macro-generator) a napsal vylepšený makro procesor pro generování zdrojového kódu programovacího jazyka C (1972), který sám navrhl.
Nový makro procesor napsal pro minipočítač AP-3 – odtud jméno M3.
Tento přímý předchůdce současného M4 dokázal výrazně ušetřit těžkou a časově náročnou práci, čímž zaujal vývojáře programující v jiných jazycích (FORTRAN (FORmula TRANslation), COBOL (COmmon Business-Oriented Language), PL/I (Programming Language One), …).
Vývojáři upravovali M3 pro tyto jazyky čímž ho proměnili na univerzálně použitelný makro procesor M4.

182
[m4 ∈ {množina nástrojů UNIX-u}]

182
Dennis Ritchie byl také spolutvůrcem operačního systému UNIX a proto:

182
M4 je minimalistický a rychlý, dělá jednu věc a tu dělá dobře (Filosofie UNIX-u)

182
výhradně spoléhá na neinteraktivní rozhraní příkazové řádky

182
parametry a závislosti M4 skriptů popisuje 

182
znakem  začíná jednořádkový komentář jako v UNIX-ovém shell-u

182
proměnné , , , , , , … mají podobný význam jako v shell-u

182
oddělovač argumentů je čárka

239
Makro procesor M3 rozšířil také Jim E. Weythman, autor programové konstrukce, která se používá téměř v každém M4 skriptu:

246
[idiomatický kód M4]

255
Klíčové slovo (divert(-1), divert(0), divert(1), …, divert(2147483647)) přepíná výstupní fronty.
Argument  zcela vypne jakýkoliv textový výstup.
Argument  přepne výstup na  (standardní výstup).

266
M4

270
Brian Kernighan (Wikipedie) makro procesor M3 rozšířil na preprocesor (Wikipedie) jazyka FORTRAN 66,
aby mohl vytvořit hybridní jazykovou nadstavbu pojmenovanou RATFOR (RATional FORtran).
Základní programové konstrukce této nadstavby (podmínky, cykly) jsou stejné jako v jazyce C.
Programování v RATFOR-u se tak podobá programování v „céčku“.
Makro procesor zdrojový kód překládá zpátky do FORTRAN-u, poté kompilátor provede překlad do strojového kódu.

285
[jazyk M4 doplňuje jazyk C]

285
Všimněte si téměř dokonalé symbiózy s jazykem C

285
direktivy CPP (Preprocesor jazyka C) , , , … jsou pro M4 komentáře

285
klíčová slova oddělená od závorek mezerou, ztrácí svůj původní význam

M4 například ignoruje funkci 


285
argumenty maker oddělují čárky stejně jako argumenty funkcí jazyka C

je-li definováno makro , jeho proměnné jsou:

, , , 


285
levý řídící znak  pro neterminály není součástí syntaxe rodiny jazyků C

285
pravý řídící znak  nevadí, není-li součástí makra
oba řídící znaky lze skrýt do uživatelsky definovaných maker , 

285
makra se píší , stejně jako neterminální symboly (Wikipedie)
tím je vymezen jejich jmenný prostor

364
Uživatelský manuál zmiňuje ještě další, zde neuvedené spoluautory.
Bylo by tedy značně nespravedlivé napsat, že autory makro procesoru M4 (1977) jsou pouze dva lidé.

373
[Christopher Strachey, Dennis Ritchie, Brian Kernighan]

373
Christopher Strachey,
Dennis Ritchie,
Brian Kernighan

390
GNU M4

394
Dnes existuje několik implementací lišící se od původní implementace spíše drobnostmi.
Nejrozšířenější implementace M4 je GNU M4 používaná pro Autotools (Wikipedie)
a pro překlad jednoduchého konfiguračního souboru  na složitý .
Autorem této implementace z roku 1990 je René Seindal.
Následující příkaz nainstaluje m4 (s malým „m“):

409
[příkaz nainstaluje také další důležité balíčky]

413
Podrobný popis klíčových slov se nachází v dokumentaci:

427
Základy jazyka M4

433
Základem jazyka M4 je bezkontextová gramatika, automaty, zásobníky a výstupní fronty.
Pro pochopení jazyka M4 je proto velmi důležité rozumět základním pojmům teorie formálních jazyků –
co jsou terminální symboly (Wikipedie) (stručně terminály) a neterminální symboly (stručně neterminály).
Zmíněné pojmy si podrobněji vysvětlíme někdy později.
Cílem tohoto úvodního dílu je hlavně ukázat praktické použití M4 na příkladech.

448
Bezkontextová gramatika

454
Bezkontextová gramatika (krátce CFG (Context-Free Grammar – bezkontextová gramatika)) je formální gramatika, ve které mají všechna přepisovací pravidla tvar .
Neterminál  se přepíše na libovolně dlouhý řetězec  (pravá strana přepisovacího pravidla) složený z terminálů  nebo neterminálů .
Kleeneho hvězda (Wikipedie)  znamená, že se neterminál  může přepsat na  (epsilon – prázdný symbol) (přepisovací pravidlo: ).

465
[přepisovací pravidla bezkontextové gramatiky]

471
Přepisovací pravidla M4

477
Přepisovací pravidla M4 jsou stejná jako přepisovací pravidla bezkontextové gramatiky.

485
[přepisovací pravidla M4]

494
Všechna klíčová slova M4 jsou neterminály (makra), provedou nějakou akci a přepíší se na  (epsilon – prázdný symbol) nebo jiný symbol.
Všechna klíčová slova mohou být přejmenována nebo úplně vypnuta.
Tato vlastnost je velmi důležitá pro režim preprocesoru.

505
[klíčová slova M4 jsou neterminály]

512
Řízení expanze neterminálů

518
Výchozí dvojice znaků  v M4 řídí expanzi neterminálů.
Klíčové slovo  je může změnit na jiné znaky, například {, , }.
Neterminály, které nechceme (ihned) expandovat, jsou obklopeny touto dvojicí znaků.
Při průchodu makro procesorem jsou všechny symboly mezi touto dvojicí znaků terminálními symboly a vnější dvojice znaků je odstraněna.
Další průchod již způsobí expanzi původně chráněných neterminálů.
Dvojice řídících znaků se nastavuje na začátku kořenového souboru.

536
Automaty

542
Automaty používají přepisovací pravidla gramatiky jako uzly a mění své stavy podle vstupních symbolů.
Aktuálně používané přepisovací pravidlo produkuje do výstupní fronty (nebo do několika výstupních front)
specifický kód, dokud automat nepřejde do jiného uzlu s jiným přepisovacím pravidlem.
Automaty slouží jako „přepínače“ pravidel gramatiky.
Příklady generujících automatů jsou ukázány v příloze.

557
Výstupní fronty

563
Výstupní fronty jsou dočasné úložiště pro části výsledného kódu.
Tyto části výsledného kódu jsou produkovány přepisovacími pravidly gramatiky, které přepisují vstupní symboly.
Klíčové slovo  nastavuje aktuální výstupní frontu.
Na závěr jsou všechny neprázdné fronty vypsány ve vzestupném pořadí na standardní výstup a složí výsledný kód z částí kódu.
Výstupní fronty jsou ukázány v příloze.

579
Zásobníky si ukážeme později.

587
Hlavní použití M4

593
M4 se používá ke generování zdrojového kódu libovolného programovacího jazyka nebo jako preprocesor jakéhokoliv zdrojového kódu.

601
Generování kódu

607
M4 transformuje vstupní data ze souborů  (Macro Configuration) na výsledná data následujícím příkazem:

614
[← nejobecnější.m4 … nejspeciálnější.m4 →]

618
Během načítání souborů jsou prováděny dvě základní operace:

625
čtení transformačních pravidel ze souborů s příponou 

625
expanze maker uvnitř souborů s příponou 

643
Soubory  a  obsahují vstupní data ve specifickém formátu, který umožňuje jejich transformaci na výstupní data podle pravidel v předchozích  souborech.
Datové soubory  obvykle neobsahují žádná transformační pravidla.

652
Vstupní data mohou také přicházet z kolony:

659
[vstupní kód → generování zdrojového kódu → soubor]

663
[vstupní kód → generování zdrojového kódu → program]

667
Vyzkoušejte: Příklady generování kódu

675
Preprocesor

681
M4 může pracovat v režimu preprocesoru.
Vstupní zdrojový kód jím prochází beze změny s výjimkou neterminálních symbolů.
Nalezené neterminály jsou expandovány na terminály a odchází spolu se zdrojovým kódem na výstup.
M4 může rozšířit jakýkoliv jiný jazyk, kde je preprocesor nedostatečný (bez rekurze) nebo žádný.
Důležité je zvolit vhodný levý znak pro řízení expanze neterminálů, který nesmí kolidovat se znakem vstupního zdrojového kódu.
Kolize znaku je ale snadno řešitelná regulárním výrazem.

698
[M4 jako preprocesor – obecně]

702
[M4 jako preprocesor – bez dočasného souboru]

706
M4 v režimu preprocesoru může být součástí kolony.
Konfliktní znak  ze vstupního zdrojového kódu je skryt do makra, například .
Prázdný pár řídících znaků  před makrem slouží jako oddělovač symbolů.

720
[M4 jako preprocesor s řídícími znaky: `']

724
Při průchodu zdrojového kódu makro procesorem se makro  přepíše zpátky na původní znak  a prázdný pár  je odstraněn.
Použijeme-li pro řízení expanze neterminálů hranaté závorky, skryjeme stejným způsobem levou  hranatou závorku.

733
[M4 jako preprocesor s řídícími znaky: []]

737
Pro řízení expanze neterminálů lze použít netisknutelné znaky  () a  ().
Tyto znaky nemohou kolidovat s tisknutelnými znaky zdrojového kódu.

746
[M4 jako preprocesor s řídícími znaky: ␂␆]

752
Vyzkoušejte: Příklady preprocesoru

756
Smíšený režim

762
Smíšený režim je kombinací předchozích režimů a je používán hlavně na pokusy.
Data nejsou oddělena od transformačních pravidel.
Listový soubor  obsahuje definice těchto pravidel spolu se vstupními daty.

773
[jak se naučit M4]

777
Vyzkoušejte: M4 – příklady

782
Předpoklady pro zvládnutí M4

788
Pro úspěšné zvládnutí tohoto makro jazyka je důležité splnit několik předpokladů.
M4 není jednoduchý jazyk, protože není možné v něm myslet a programovat jako v běžném programovacím jazyce.
Nejdůležitější je uvědomit si, že se v něm programují přepisovací pravidla gramatiky.
Každý řetězec je buď terminální nebo neterminální symbol včetně všech klíčových slov jazyka (symboly  a  jsou speciální případy neterminálů).

801
M4 záměrně nemá klíčová slova pro cykly (/), protože jeho základ je zcela jiný, než jaký mají procedurální nebo funkcionální jazyky.

801
cykly jsou pouze levorekurzivní nebo pravorekurzivní

801
větví se řetězením symbolů nebo klíčovými slovy , 

833
Základy gramatik

839
Základem všech gramatik jsou přepisovací pravidla, jejichž podobu obecně popisuje:

846
Formální gramatika (Chomského typu)

863
Formální gramatika (Wikipedie) popisuje podmnožiny (Wikipedie – Chomského hierarchie) přepisovacích pravidel formálního jazyka (Wikipedie).
Jedna z podmnožin se jmenuje bezkontextová gramatika (Wikipedie), krátce CFG (Context-Free Grammar – bezkontextová gramatika).
Jak již bylo dříve zmíněno, přepisovací pravidla CFG pracují stejně jako přepisovací pravidla jazyka M4.
Některý z následujících dílů seriálu se podrobněji zaměří na formální gramatiky.

876
Základy automatů

882
Schopnost používat převážně dvoustavové automaty je zásadní věc pro psaní jednoduchých M4 skriptů, protože převážná většina skriptů používá malé automaty.

889
Testovací automat

895
Pořadí vstupních symbolů nebo jejich kontext lze otestovat automatem.
Splňují-li vstupní symboly požadované vlastnosti, automat skončí v uzlu s dvojitým kroužkem, kterým se označuje akceptující stav.

904
[deterministický konečný automat (DFA)]

904
Příklad automatu akceptující sudý počet (žádný je také sudý) symbolů , ignorující symboly .
Automat je shodný s regulárním výrazem .

919
Předchozí automat lze zapsat jako ASCII art doprovázející M4 skript:

926
[ASCII art jako dokumentace M4 kódu]

935
Generující automat

941
Vstupní symboly mění uzly automatu, čímž zároveň mění přepisovací pravidla pro generování kódu.
Tento příklad naleznete v příloze:

950
[ASCII art generujícího automatu]

956
První symbol ve stavu  vygeneruje záhlaví se závorkami a první položku.
Poté automat přejde do stavu , ve kterém se pouze přidávají další položky.
Automat zůstává v tomto stavu, dokud nejsou zpracována všechna data.

968
(GNU) make

974
Dobře navržený generátor kódu se obvykle skládá z několika menších souborů, jejichž pořadí, závislosti a parametry se zapisují do souboru .
Dobrá znalost tvorby  je proto základním předpokladem pro zvládnutí M4.
Čtení a údržba zdrojového kódu celkově zabere vždy více času než jeho tvorba.
Dobře strukturovaný  proto zásadním způsobem přispívá k celkové přehlednosti výsledného generátoru kódu.

987
[tímto tématem se budeme zabývat jindy]

987
Spouštění  z editoru kódu pomocí vhodné klávesové zkratky zásadně urychluje vývoj M4 kódu.
Soubor  obsahuje .

997
Vim

1003
Zvládnutí editoru Vim je důležitým předpokladem pro pohodlí a rychlost psaní kódu M4.
Vim zkratky, definované klíčovým slovem , ušetří velké množství zbytečně napsaného textu.
Tyto zkratky také významně snižují výskyt téměř neviditelných chyb způsobených nepárovou závorkou, čímž šetří ztracený čas vynaložený na ladění kódu.

1015
Talent a čas

1021
M4 nejde zvládnout přes víkend, zvláště chybí-li základy
teorie automatů (Wikipedie) a formálních gramatik (Wikipedie).
Pro zvládnutí M4 je nutné „odpřemýšlet si“ delší období a napsat velké množství špatného (složitého) M4 kódu, který z vlastní vůle přepíšete kvůli lepšímu nápadu.
Tímto způsobem je možné postupně získat určitou praxi.

1037
[M4 je těžký ⚠ jazyk!]

1037
Disclaimer 🕱: Větší M4 projekty vyžadují praxi!

1045
Příklady generování kódu

1045
Znaky {, , , } v názvu příkladu řídí expanzi neterminálů.

1051
Příklady v této příloze jsou složitější a jejich cílem je ukázat praktické použití jazyka M4.
Podrobněji budou vysvětleny později.

1061
 Vstupní zdrojový kód

1067
Vstupní zdrojový kód je podobný CSV (Comma Separated Values), který se převede na libovolně složitý cílový kód jiného jazyka pomocí CFG (Context-Free Grammar – bezkontextová gramatika), automatů a výstupních front.
Zásobníky v příkladech nejsou použity.

1076
[vstupní zdrojový kód obsahuje speciální znaky ⚠]

1078
Vstupní soubor může také obsahovat poznámky, které nemusí být skryté v komentářích , ,  nebo .

1086
 CSV – nejjednodušší příklad

1092
Tento příklad nepoužívá výstupní fronty, pouze generuje CSV (Comma Separated Values) oddělené znakem .

1102
 CSV – počítadlo

1108
Příklad používá makro  z kořenového souboru, jehož  (pravá strana přepisovacího pravidla) se zkopíruje do pravé strany makra .
Během první expanze  proběhne inicializace jeho startovací hodnoty.
Další expanze vrátí číselný terminální symbol a proběhne zvýšení pomocného (globálního) symbolu o jedničku.
 je malý automat.

1124
(jak se to dělá) Úpravy speciálních znaků

1130
Každý typ výstupního kódu vyžaduje úpravu speciálních znaků.
Klíčové slovo jazyka M4  je nevhodné pro tento úkol.
Všechny speciální znaky vstupního souboru napřed skryjeme do vhodně pojmenovaných maker pomocí regulárních výrazů.

1148
Upravený vstupní kód

1154
[všechny speciální znaky jsou skryty do maker]

1156
Vytvoříme několik převodních souborů podle typu cílového kódu, makra pro hranaté závorky  a  jsou už definována v kořenovém souboru.

1163
 XML, XSLT, HTML

1167
[převodní soubor pro značkovací jazyky]

1170
 C, JSON, INI – 

1175
[převodní soubor pro zdrojový kód]

1178
 Bash – 

1183
[převodní soubor pro Bash řetězce v uvozovkách]

1185
 Bash – 

1190
[převodní soubor pro Bash řetězce v apostrofech]

1192
 CSV, M4

1196
[převodní soubor vrátí všechny speciální znaky zpátky]

1199
 C – výstupní fronta

1205
Příklad používá jednu výstupní frontu na znaky  pro uzavření pole na konci skriptu.

1215
 INI – externí příkaz

1221
Příklad spustí externí příkaz  a jeho výstup umístí do hranatých závorek.
Výstupem externího příkazu jsou dvě položky oddělené čárkou.
Makro  vybere první položku, protože druhá položka obsahuje nežádoucí znak nového řádku  ().

1235
 .h – hex počítadlo

1241
Příklad používá makro  pro číslování výsledných CPP (Preprocesor jazyka C) maker a jednu výstupní frontu.
Fronta číslo  obsahuje direktivu preprocesoru  pro zakončení hlavičkového souboru.
Převod dekadické hodnoty počítadla na dvoumístné hex-a číslo provádí klíčové slovo .

1255
 C – malý automat

1261
Příklad používá malý automat  pro generování znaku nového řádku  a jednu výstupní frontu číslo  do které se vloží znaky  pro uzavření výsledného řetězce.
Poprvé se  přepíše na  (epsilon – prázdný symbol), podruhé a dále se přepíše na .

1273
 C – malý automat 2

1279
Tento příklad je podobný předchozímu, avšak každý řetězec je na novém řádku.

1289
 HTML – výstupní fronty

1295
Příklad používá dvě výstupní fronty.
Fronta číslo  obsahuje odstavce, fronta číslo  uzavírací značky HTML stránky.
Navigační odkazy nemusí být nikde uloženy, jdou přímo na výstup.
Zprávy typu  a  jsou zpracovány stejně jako zprávy typu .

1312
 Větvení gramatikou

1318
Příklad ukazuje větvení gramatikou, argumenty maker se ignorují.
Vstupní neterminály se přepisují na terminály (🐛), (🐜), (🐝).

1330
 JSON – generující automat

1336
Příklad používá dvě výstupní fronty a jeden generující automat.
První chybová zpráva  ve stavu  vygeneruje záhlaví se závorkami a vypíše na výstup první záznam.
Automat přejde do stavu  což je  pravidlo (takové pravidlo se používá jako pravá strana jiného přepisovacího pravidla).
Následující chybové zprávy ve stavu  pouze vypisují na výstup jednotlivé záznamy.
Na závěr výstupní fronty číslo  a  vypíšou znaky  a  čímž zakončí výsledný JSON.

1354
 JSON – pojmenované fronty

1360
Příklad zpracovává další zprávy typu  a .
Používá tři automaty a šest výstupních front.
Generujeme-li složitější zdrojový kód, brzy narazíme na problém udržení konzistence indexů pro výstupní fronty.
Abychom se vyhnuli zmatku, pojmenujeme si fronty a místo čísel používáme jména.

1373
Abychom nemuseli definovat podobná pravidla, zkopírujeme si pravou stranu 
(je to také  pravidlo (takové pravidlo se používá jako pravá strana jiného přepisovacího pravidla)) do pravé strany pravidel  a .
Proměnná  se přepíše na jméno makra a zřetězí se s dalším symbolem.
Nově vzniklý neterminál se přepíše na odpovídající terminální symbol (číslo fronty nebo jméno).

1384
[větvení gramatikou v M4]

1397
 JSON – generované indexy front

1403
Během vývoje se často mění pořadí a počet výstupních front, což také vyžaduje častou změnu jejich indexů.
Indexy je proto vhodné generovat.
Můžeme pak používat prakticky neomezený počet front.
Následující příklad ukazuje, jak se tyto indexy generují.

1419
 INI – nespojitý index front

1425
Příklad používá tři automaty a dvě výstupní fronty číslo  a  definované v odděleném souboru.
Názvy INI sekcí jsou generovány řetězením symbolů.
Příklad používá stejný soubor pro výstupní fronty jako příklad pro generování JSON.

1439
 XML – smíšené zprávy

1445
Příklad používá jednu výstupní frontu číslo  pro uzavírací značku .

1455
 XML – oddělené zprávy

1461
Příklad seskupuje zprávy podle jejich typu pomocí výstupních front.

1471
 Bash 

1480
 Bash 

1489
Příklady preprocesoru

1489
Znaky {, , , } v názvu příkladu řídí expanzi neterminálů.

1495
 Preprocesor jazyka C a M4

1501
Direktivy CPP (Preprocesor jazyka C) jsou pro M4 jednořádkový komentář, což brání nežádoucí expanzi stejně pojmenovaných maker.
Definujeme-li bezpečnější makro , stejně pojmenované makro  nebude přepsáno.
Jmenný prostor CPP (Preprocesor jazyka C) tak může být zcela oddělen od jmenného prostoru M4.
Problematický znak  je skryt do makra .
Apostrof  ve zdrojovém kódu ničemu nevadí.
Apostrof uvnitř makra  je skryt do makra .
Všimněte si jmen funkcí  nebo  a kde je expandován .

1523
 CSS – komentáře

1529
CSS používá znak  pro kódy barev, což je také začátek jednořádkového M4 komentáře.
Klíčové slovo  nastaví víceřádkový komentář  a přepíše se na  (epsilon – prázdný symbol).
Komentáře se vypínají stejným klíčovým slovem  bez parametrů.

1543
 Bash – netisknutelné znaky

1549
Bash používá oba znaky,  a .
Nechceme-li je skrývat do makra  nebo , můžeme použít pro řízení expanze neterminálů netisknutelné znaky, viz. příklad:

1561
M4 – příklady

1561
Znaky {, , , } v názvu příkladu řídí expanzi neterminálů.

1568
 JSON – levá závorka 

1574
Uvnitř hranatých závorek .
Proto je levá hranatá závorka  nahrazena makrem  z kořenového souboru.

1586
 Bash – počítadla

1592
Počítadla  a  jsou definována v kořenovém souboru.
Neterminály
 nebudou expandovány, pouze se odeberou vnější závorky.
Nutno použít makro  z kořenového souboru.

1606
 .h – závorky , , , 

1612
Prázdný pár  (nebo prázdný symbol v závorkách ) slouží jako oddělovač symbolů.
Závorky kolem znaku komentáře  vypnou jeho původní význam, stejně jako vypnou význam silnějšího M4 komentáře .
Vypnou také původní význam čárky  jako oddělovače argumentů maker.
Tyto symboly se stanou obyčejnými terminálními symboly bez jakéhokoliv vedlejšího efektu.

1628
 AWK – příklady bezpečnějších maker

1634
Univerzální výstraha  se ignoruje bez závorek, stejně jako , , …
Taková makra explicitně vytváří vývojář skriptů, prohlédněte si kořenový soubor.

1648
Proč používat M4 a proč ne?

1648
Znaky {, , , } v názvu příkladu řídí expanzi neterminálů.

1656
 Proč generovat kód v M4

1662
přímé použití bezkontextové gramatiky (rekurze zdarma)
pro transformaci dat stačí napsat minimum M4 kódu

1662
přímé použití automatů
možnost vymodelovat si potřebné algoritmy (M4 nepotřebuje verze)

1662
přímé použití zásobníků
zásobníky propojené s automaty rozšiřují možnosti generátoru kódu

1662
přímé použití výstupních front pro dočasné uložení výsledných částí kódu
jednotlivé fronty jsou na závěr vypsány na výstup ve vzestupném pořadí

1662
vyšší rychlost generování kódu (ve srovnání s XSLT)
nízké nároky na výpočetní zdroje

1712
 Proč se vyhnout M4

1718
univerzální jazyk nízké úrovně (podobně jako jazyk C)
nemůže konkurovat úzce specializovaným jazykům, například XSLT

1718
neexistující komunita vývojářů (podzim 2019)
M4 je zapomenutý jazyk, málo existujících projektů

1718
neobvyklé programovací paradigma vyžadující splnění několika předpokladů
M4 je proto těžký jazyk

1718
produktivita značně závisí na zkušenostech (možný problém s termíny)
schopnost myslet v M4 je nutnost

1718
údržba špatně napsaného M4 kódu je těžká
existující M4 kód je snadné proměnit ve zmatek

---

59
Generování kódu v M4	vícejazyčná šablona s příklady pro www.root.cz (Root.cz – informace nejen ze světa Linuxu)

151
A General Purpose Macro-generator	Computer Journal 8, 3 (1965), 225–41

270
RATFOR — A Preprocessor for a Rational Fortran	Brian W. Kernighan

364
The M4 Macro Processor	Bell Laboratories (1977)

373
Christopher Strachey	Computer Hope – Free computer help since 1998

373
Dennis Ritchie	Zomrel tvorca Unixu a jazyka C

373
Brian Kernighan	An Interview with Brian Kernighan

413
GNU M4 - GNU macro processor	Free Software Foundation

904
Teorie automatů	From Wikipedia, the free encyclopedia

987
GNU Make Manual	Free Software Foundation

1003
Vim – všudypřítomný textový editor	který edituje text rychlostí myšlenky

1021
Automaty a formální jazyky I	Učební text FI MU

1035
Automaty a gramatiky	Michal Chytil, 1. vydání, Praha, 331 s. 1984.
