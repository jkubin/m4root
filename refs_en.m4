# DO NOT EDIT! This file is generated automatically!

__HEADER([Josef Kubin], [2019/12/11], [root_cz])
___DESCR([(this is a generated file) associative memory to linking references, contains captions and ID])
___POINT([linking links and simple database])

# A ‚Üí Œ≤
define([fundamentals.mc.en.capt], [Generating code in M4: fundamentals])
define([fundamentals.mc.en.anch], [generating-code-in-m4-fundamentals])
define([2.en.capt], [Generating code in M4: fundamentals])
define([2.en.anch], [generating-code-in-m4-fundamentals])
define([#.en.Generating code in M4: fundamentals], [2])

define([intro.mc.en.capt], [Generating code in M4: introduction])
define([intro.mc.en.anch], [generating-code-in-m4-introduction])
define([1.en.capt], [Generating code in M4: introduction])
define([1.en.anch], [generating-code-in-m4-introduction])
define([#.en.Generating code in M4: introduction], [1])

# A ‚Üí Œ≤
define([fundamentals.mc.en.anch.Introduction], [introduction])
define([fundamentals.mc.en.uniq.Introduction])
define([intro.mc.en.anch.Introduction], [introduction])
define([intro.mc.en.uniq.Introduction])
define([intro.mc.en.anch.what_is_the_series_about], [what-is-the-series-about])
define([intro.mc.en.anch.Examples for readers], [examples-for-readers])
define([intro.mc.en.uniq.Examples for readers])
define([intro.mc.en.anch.History of macro languages], [history-of-macro-languages])
define([intro.mc.en.uniq.History of macro languages])
define([intro.mc.en.anch.GPM (General Purpose Macro-generator)], [gpm-general-purpose-macro-genera])
define([intro.mc.en.uniq.GPM (General Purpose Macro-generator)])
define([intro.mc.en.anch.M3], [m3])
define([intro.mc.en.uniq.M3])
define([intro.mc.en.anch.common_code], [common-code])
define([intro.mc.en.anch.M4], [m4])
define([intro.mc.en.uniq.M4])
define([intro.mc.en.anch.the_authors], [the-authors])
define([intro.mc.en.anch.GNU M4], [gnu-m4])
define([intro.mc.en.uniq.GNU M4])
define([intro.mc.en.anch.install], [install])
define([intro.mc.en.anch.Basics of M4], [basics-of-m4])
define([intro.mc.en.uniq.Basics of M4])
define([intro.mc.en.capt.context_free_grammar], [Context-free grammar])
define([intro.mc.en.anch.context_free_grammar], [context-free-grammar])
define([intro.mc.en.uniq.Context-free grammar])
define([intro.mc.en.anch.all_context_free_grammar_rules], [all-context-free-grammar-rules])
define([intro.mc.en.capt.m4_rules], [M4 rewriting rules])
define([intro.mc.en.anch.m4_rules], [m4-rewriting-rules])
define([intro.mc.en.uniq.M4 rewriting rules])
define([intro.mc.en.capt.expansion_control], [Nonterminal expansion control])
define([intro.mc.en.anch.expansion_control], [nonterminal-expansion-control])
define([intro.mc.en.uniq.Nonterminal expansion control])
define([intro.mc.en.capt.automata_descr], [Automata])
define([intro.mc.en.anch.automata_descr], [automata])
define([intro.mc.en.uniq.Automata])
define([intro.mc.en.capt.output_queues], [Output queues])
define([intro.mc.en.anch.output_queues], [output-queues])
define([intro.mc.en.uniq.Output queues])
define([intro.mc.en.capt.main_uses_of_m4], [Main uses of M4])
define([intro.mc.en.anch.main_uses_of_m4], [main-uses-of-m4])
define([intro.mc.en.uniq.Main uses of M4])
define([intro.mc.en.capt.code_generation], [The code generation])
define([intro.mc.en.anch.code_generation], [the-code-generation])
define([intro.mc.en.uniq.The code generation])
define([intro.mc.en.anch.files_on_command_line], [files-on-command-line])
define([intro.mc.en.capt.m4_as_preproc], [The preprocessor])
define([intro.mc.en.anch.m4_as_preproc], [the-preprocessor])
define([intro.mc.en.uniq.The preprocessor])
define([intro.mc.en.anch.CODE_M4([`']) Default characters], [ba-default-characters])
define([intro.mc.en.uniq.CODE_M4([`']) Default characters])
define([intro.mc.en.anch.CODE_M4([[]]) Square brackets], [square-brackets])
define([intro.mc.en.uniq.CODE_M4([[]]) Square brackets])
define([intro.mc.en.anch.CODE_M4([‚êÇ‚êÜ]) Non printable characters], [non-printable-characters])
define([intro.mc.en.uniq.CODE_M4([‚êÇ‚êÜ]) Non printable characters])
define([intro.mc.en.anch.CODE_M4([‚ü¶‚üß]) UTF-8 characters], [utf-8-characters])
define([intro.mc.en.uniq.CODE_M4([‚ü¶‚üß]) UTF-8 characters])
define([intro.mc.en.anch.Mixed mode], [mixed-mode])
define([intro.mc.en.uniq.Mixed mode])
define([intro.mc.en.capt.prerequisites_for_mastering], [Prerequisites for mastering M4])
define([intro.mc.en.anch.prerequisites_for_mastering], [prerequisites-for-mastering-m4])
define([intro.mc.en.uniq.Prerequisites for mastering M4])
define([intro.mc.en.anch.Fundamentals of grammars], [fundamentals-of-grammars])
define([intro.mc.en.uniq.Fundamentals of grammars])
define([intro.mc.en.capt.formal_grammar_chomsky], [Formal grammar (Chomsky type)])
define([intro.mc.en.anch.formal_grammar_chomsky], [formal-grammar-chomsky-type])
define([intro.mc.en.uniq.Formal grammar (Chomsky type)])
define([intro.mc.en.anch.Fundamentals of automata], [fundamentals-of-automata])
define([intro.mc.en.uniq.Fundamentals of automata])
define([intro.mc.en.capt.testing_automaton], [Testing automaton])
define([intro.mc.en.anch.testing_automaton], [testing-automaton])
define([intro.mc.en.uniq.Testing automaton])
define([intro.mc.en.anch.dfa_img], [dfa-img])
define([intro.mc.en.capt.generating_automaton], [Generating automaton])
define([intro.mc.en.anch.generating_automaton], [generating-automaton])
define([intro.mc.en.uniq.Generating automaton])
define([intro.mc.en.anch.(GNU) make], [gnu-make])
define([intro.mc.en.uniq.(GNU) make])
define([intro.mc.en.anch.Vim], [vim])
define([intro.mc.en.uniq.Vim])
define([intro.mc.en.anch.Talent and time], [talent-and-time])
define([intro.mc.en.uniq.Talent and time])
define([intro.mc.en.capt.code_generation_examples], [Code generation examples])
define([intro.mc.en.anch.code_generation_examples], [code-generation-examples])
define([intro.mc.en.uniq.Code generation examples])
define([intro.mc.en.capt.input_source_code], [CODE_M4([[]]) Input source code])
define([intro.mc.en.anch.input_source_code], [input-source-code])
define([intro.mc.en.uniq.CODE_M4([[]]) Input source code])
define([intro.mc.en.anch.CODE_M4([[]]) CSV ‚Äì simplest example], [csv-simplest-example])
define([intro.mc.en.uniq.CODE_M4([[]]) CSV ‚Äì simplest example])
define([intro.mc.en.anch.CODE_M4([[]]) CSV ‚Äì counter], [csv-counter])
define([intro.mc.en.uniq.CODE_M4([[]]) CSV ‚Äì counter])
define([intro.mc.en.anch.CODE([üí°], [how to do it],, [cursor:help]) Modification of special characters], [modification-of-special-characte])
define([intro.mc.en.uniq.CODE([üí°], [how to do it],, [cursor:help]) Modification of special characters])
define([intro.mc.en.capt.modified_input_source_code], [Modified input code])
define([intro.mc.en.anch.modified_input_source_code], [modified-input-code])
define([intro.mc.en.uniq.Modified input code])
define([intro.mc.en.anch.CODE_M4([[]]) conv_file XML[,] XSLT[,] HTML], [conversion-file-for-xml-xslt-htm])
define([intro.mc.en.uniq.CODE_M4([[]]) conv_file XML[,] XSLT[,] HTML])
define([intro.mc.en.anch.CODE_M4([[]]) conv_file C[,] JSON[,] INI: CODE([DQ()≈ôetƒõzec[]DQ()])], [conversion-file-for-c-json-ini-d])
define([intro.mc.en.uniq.CODE_M4([[]]) conv_file C[,] JSON[,] INI: CODE([DQ()≈ôetƒõzec[]DQ()])])
define([intro.mc.en.anch.CODE_M4([[]]) conv_file Bash: CODE([DQ()string[]DQ()])], [conversion-file-for-bash-dstring])
define([intro.mc.en.uniq.CODE_M4([[]]) conv_file Bash: CODE([DQ()string[]DQ()])])
define([intro.mc.en.anch.CODE_M4([[]]) conv_file Bash: CODE([AP()string[]AP()])], [conversion-file-for-bash-astring])
define([intro.mc.en.uniq.CODE_M4([[]]) conv_file Bash: CODE([AP()string[]AP()])])
define([intro.mc.en.anch.CODE_M4([[]]) conv_file CSV[,] M4 (returns all characters)], [conversion-file-for-csv-m4-retur])
define([intro.mc.en.uniq.CODE_M4([[]]) conv_file CSV[,] M4 (returns all characters)])
define([intro.mc.en.anch.CODE_M4([[]]) C ‚Äì output queue], [c-output-queue])
define([intro.mc.en.uniq.CODE_M4([[]]) C ‚Äì output queue])
define([intro.mc.en.anch.CODE_M4([[]]) INI ‚Äì an external command], [ini-an-external-command])
define([intro.mc.en.uniq.CODE_M4([[]]) INI ‚Äì an external command])
define([intro.mc.en.anch.CODE_M4([[]]) .h ‚Äì hex counter], [h-hex-counter])
define([intro.mc.en.uniq.CODE_M4([[]]) .h ‚Äì hex counter])
define([intro.mc.en.capt.small_automaton], [CODE_M4([[]]) C ‚Äì small automaton])
define([intro.mc.en.anch.small_automaton], [c-small-automaton])
define([intro.mc.en.uniq.CODE_M4([[]]) C ‚Äì small automaton])
define([intro.mc.en.anch.CODE_M4([[]]) C ‚Äì small automaton 2], [c-small-automaton-2])
define([intro.mc.en.uniq.CODE_M4([[]]) C ‚Äì small automaton 2])
define([intro.mc.en.capt.output_queues_html], [CODE_M4([[]]) HTML ‚Äì output queues])
define([intro.mc.en.anch.output_queues_html], [html-output-queues])
define([intro.mc.en.uniq.CODE_M4([[]]) HTML ‚Äì output queues])
define([intro.mc.en.capt.branching_in_m4], [CODE_M4([[]]) Branching by grammar])
define([intro.mc.en.anch.branching_in_m4], [branching-by-grammar])
define([intro.mc.en.uniq.CODE_M4([[]]) Branching by grammar])
define([intro.mc.en.capt.json_generating_automaton], [CODE_M4([[]]) JSON ‚Äì generating automaton])
define([intro.mc.en.anch.json_generating_automaton], [json-generating-automaton])
define([intro.mc.en.uniq.CODE_M4([[]]) JSON ‚Äì generating automaton])
define([intro.mc.en.capt.json_branch], [CODE_M4([[]]) JSON ‚Äì named queues])
define([intro.mc.en.anch.json_branch], [json-named-queues])
define([intro.mc.en.uniq.CODE_M4([[]]) JSON ‚Äì named queues])
define([intro.mc.en.anch.nonterminals_for_branches], [nonterminals-for-branches])
define([intro.mc.en.capt.json_symbolic_queue_names], [CODE_M4([[]]) JSON ‚Äì generated queue indexes])
define([intro.mc.en.anch.json_symbolic_queue_names], [json-generated-queue-indexes])
define([intro.mc.en.uniq.CODE_M4([[]]) JSON ‚Äì generated queue indexes])
define([intro.mc.en.anch.CODE_M4([[]]) INI ‚Äì discontinuous queue index], [ini-discontinuous-queue-index])
define([intro.mc.en.uniq.CODE_M4([[]]) INI ‚Äì discontinuous queue index])
define([intro.mc.en.anch.CODE_M4([[]]) XML ‚Äì mixed messages], [xml-mixed-messages])
define([intro.mc.en.uniq.CODE_M4([[]]) XML ‚Äì mixed messages])
define([intro.mc.en.anch.CODE_M4([[]]) XML ‚Äì separated messages], [xml-separated-messages])
define([intro.mc.en.uniq.CODE_M4([[]]) XML ‚Äì separated messages])
define([intro.mc.en.anch.CODE_M4([[]]) Bash CODE([CMD() echo []DQ()string[]DQ()])], [bash-cmd-echo-dstringd])
define([intro.mc.en.uniq.CODE_M4([[]]) Bash CODE([CMD() echo []DQ()string[]DQ()])])
define([intro.mc.en.anch.CODE_M4([[]]) Bash CODE([CMD() echo 'string'])], [bash-cmd-echo-astringa])
define([intro.mc.en.uniq.CODE_M4([[]]) Bash CODE([CMD() echo 'string'])])
define([intro.mc.en.capt.preproc_examples], [Preprocessor examples])
define([intro.mc.en.anch.preproc_examples], [preprocessor-examples])
define([intro.mc.en.uniq.Preprocessor examples])
define([intro.mc.en.capt.cpp_and_m4], [CODE_M4([`']) C[]NB()preprocessor and M4])
define([intro.mc.en.anch.cpp_and_m4], [ba-c-preprocessor-and-m4])
define([intro.mc.en.uniq.CODE_M4([`']) C[]NB()preprocessor and M4])
define([intro.mc.en.anch.CODE_M4([`']) CSS ‚Äì file inclusion[,] comment], [ba-css-file-inclusion-comment])
define([intro.mc.en.uniq.CODE_M4([`']) CSS ‚Äì file inclusion[,] comment])
define([intro.mc.en.capt.nprint_bash], [BO([CODE([‚êÇ‚êÜ])]) Bash ‚Äì nonprintable characters])
define([intro.mc.en.anch.nprint_bash], [bash-nonprintable-characters])
define([intro.mc.en.uniq.BO([CODE([‚êÇ‚êÜ])]) Bash ‚Äì nonprintable characters])
define([intro.mc.en.capt.m4_on_examples], [M4 ‚Äì examples])
define([intro.mc.en.anch.m4_on_examples], [m4-examples])
define([intro.mc.en.uniq.M4 ‚Äì examples])
define([intro.mc.en.anch.CODE_M4([[]]) JSON ‚Äì left bracket CODE([LB()])], [json-left-bracket-b])
define([intro.mc.en.uniq.CODE_M4([[]]) JSON ‚Äì left bracket CODE([LB()])])
define([intro.mc.en.anch.CODE_M4([[]]) Bash ‚Äì counters], [bash-counters])
define([intro.mc.en.uniq.CODE_M4([[]]) Bash ‚Äì counters])
define([intro.mc.en.capt.symbols_in_brackets], [CODE_M4([[]]) .h ‚Äì brackets CODE_M4([[]])[,] CODE_M4([[,]])[,] CODE_M4([[#]])[,] CODE_M4([[dnl]])])
define([intro.mc.en.anch.symbols_in_brackets], [h-brackets-h-dnl])
define([intro.mc.en.uniq.CODE_M4([[]]) .h ‚Äì brackets CODE_M4([[]])[,] CODE_M4([[,]])[,] CODE_M4([[#]])[,] CODE_M4([[dnl]])])
define([intro.mc.en.capt.safe_example], [CODE_M4([[]]) AWK ‚Äì examples of safer macros])
define([intro.mc.en.anch.safe_example], [awk-examples-of-safer-macros])
define([intro.mc.en.uniq.CODE_M4([[]]) AWK ‚Äì examples of safer macros])
define([intro.mc.en.capt.questions_and_answers], [Why to use M4 and why not?])
define([intro.mc.en.anch.questions_and_answers], [why-to-use-m4-and-why-not])
define([intro.mc.en.uniq.Why to use M4 and why not?])
define([intro.mc.en.capt.why_to_use_m4], [CODE([üëç]) Why to generate code in M4])
define([intro.mc.en.anch.why_to_use_m4], [why-to-generate-code-in-m4])
define([intro.mc.en.uniq.CODE([üëç]) Why to generate code in M4])
define([intro.mc.en.anch.direct_use_of_cfg], [direct-use-of-cfg])
define([intro.mc.en.anch.direct_use_of_atm], [direct-use-of-atm])
define([intro.mc.en.anch.direct_use_of_stacks], [direct-use-of-stacks])
define([intro.mc.en.anch.direct_use_of_queues], [direct-use-of-queues])
define([intro.mc.en.anch.significantly_faster_code_gener], [significantly-faster-code-gener])
define([intro.mc.en.capt.why_not_use], [CODE([üëé]) Why to avoid M4])
define([intro.mc.en.anch.why_not_use], [why-to-avoid-m4])
define([intro.mc.en.uniq.CODE([üëé]) Why to avoid M4])
define([intro.mc.en.anch.low_level_language], [low-level-language])
define([intro.mc.en.anch.nearly_forgotten_language], [nearly-forgotten-language])
define([intro.mc.en.anch.unusual_language], [unusual-language])
define([intro.mc.en.anch.experience_dependent], [experience-dependent])
define([intro.mc.en.anch.maintenance_could_be_hard], [maintenance-could-be-hard])

# A ‚Üí Œ≤
define([en.LANG_VERSION], [English version])
